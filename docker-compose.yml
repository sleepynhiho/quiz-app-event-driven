version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: quiz_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quiz_app"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: quiz-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: quiz-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    ports:
      - "9092:9092"
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # Kafka UI - Kafdrop
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: quiz-kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx128M"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - quiz-network
  
  pgadmin:
    image: dpage/pgadmin4:8.7
    container_name: quiz-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@quiz.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - quiz-network
    depends_on:
      postgres:
        condition: service_healthy

  # User service with authentication
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: quiz-user-service
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/quiz_app
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - KAFKA_BROKER=kafka:29092
      - KAFKA_CLIENT_ID=user-service
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - quiz-network

  scoring-service:
    build:
      context: ./services/scoring-service
      dockerfile: Dockerfile
    container_name: quiz-scoring-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    volumes:
      - ./services/scoring-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=quiz_app
      - KAFKA_BROKER=kafka:29092
      - KAFKA_CLIENT_ID=scoring-service
      - KAFKA_GROUP_ID=scoring-service-group
      - PORT=3003
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - quiz-network

  quiz-service:
    build:
      context: ./services/quiz-service
      dockerfile: Dockerfile
    container_name: quiz-quiz-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./services/quiz-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=quiz_app
      - KAFKA_BROKER=kafka:29092
      - KAFKA_CLIENT_ID=quiz-service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quiz-network

  answer-service:
    build:
      context: ./services/answer-service
      dockerfile: Dockerfile
    container_name: quiz-answer-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    volumes:
      - ./services/answer-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=quiz_app
      - KAFKA_BROKER=kafka:29092
      - KAFKA_CLIENT_ID=answer-service
      - QUIZ_SERVICE_URL=http://quiz-service:3001
      - PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - quiz-network

  # Frontend service with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quiz-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - quiz-service
      - answer-service
      - scoring-service
    networks:
      - quiz-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local


networks:
  quiz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
